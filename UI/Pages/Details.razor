@page "/details/{Id:long}"

@using Core.Models
@using System.Text.Json;

@inherits ComponentAPI

<PageTitle>Details</PageTitle>

<div class="container">
	<div class="row g-0">
		<div class="col-md-8">
			@if (!(property?.Photos.Any() ?? false))
			{
				<div class="d-flex justify-content-center text-center mt-5" style="min-height:300px;min-width:480px">
					<div class="spinner-border" role="status"></div>
				</div>
			}
			else
			{
				var photo = property.Photos.First();
				<picture>
					@*<source srcset="wwwroot/Photos" type="image/svg+xml+webp">*@
					<img src="data:@(photo.Format);base64, @((string)photo)" class="img-fluid" style="min-height:300px;min-width:480px" alt="photo">
				</picture>
			}
		</div>
	</div>
</div>
<div class="row bg-white">
	<div class="container p-5">
		<h4 class="fw-bold ">€@PreRender(property?.Price) per month</h4>
		<h6 class="mb-1">@(property?.Address ?? "***")</h6>
		<h6 class="align-text-top"><small class="text-muted">@PreRender(property?.OfferPurpose) - @PreRender((property?.Type)) </small></h6>
		<br />
		<hr class="bg-black border-2 border-top ">
		<h4>Property Overview</h4>
		<br />

		<h6 class="fw-bold">Bedrooms Avaiable: <span class="fw-normal">@PreRender(property?.BedroomsAvaiable)</span></h6>
		<h6 class="fw-bold">Avaiable From:  <span class="fw-normal">@PreRender(property?.AvaiableFrom.ToString("dd/MM/yyyy"))</span></h6>
		<h6 class="fw-bold">Avaiable For:  <span class="fw-normal">@AvaiableFor()</span></h6>
		<h6 class="fw-bold">Owner Occupied:  <span class="fw-normal">@PreRender(property is null ? null : property.OwnerOccupied ? "Yes": "No")</span></h6>
		<h6 class="fw-bold">Preference:  <span class="fw-normal">@Preference</span></h6>
		<br />
		<hr class="bg-black border-2 border-top ">
		<br />

		<h4>Facilities</h4>
		<br />
		<ul>
			@foreach (var item in property?.Facilities ?? new Facility[0])
			{
				<li>@item.Text</li>
			}
		</ul>
		<br />
		<hr class="bg-black border-2 border-top ">
		<br />
		<h4>Contact Details</h4>
		<br />

		<h6 class="fw-bold">Email: <span class="fw-normal">@PreRender(property?.Owner.Email)</span></h6>
		<button @onclick="ShowModal" class="btn btn-primary @(property is not null ? "enabled":"disabled")">Email</button>
	</div>
</div>

@code {
	Property? property;

	[Parameter] public long Id { get; set; }
	[CascadingParameter] public IModalService Modal { get; set; }

	void ShowModal()
	{
		var parameters = new ModalParameters();
		parameters.Add(nameof(Photo.PropertyId), property!.Id);
		parameters.Add(nameof(Core.Models.Client.Email), property!.Owner.Email);
		Modal.Show<SendEmailModal>($"Email somebody@gmail.com", parameters);
	}

	string Preference => (property is null || !property!.Preference.HasValue) ? "Male/Female" : property.Preference.Value ? "Male" : "Female";
	string AvaiableFor()
	{
		if (property is null) return PreRender(property);
		var days = ((property.AvaiableUntil ?? DateTime.Now.AddYears(1)) - property.AvaiableFrom).TotalDays;
		return days switch
		{
			(<= 31) => $"{days} days",
			(> 31 and < 365) => $"{(int)Math.Round(days / 30)} months",
			_ => "1+ years"
		};
	}

	string PreRender(object? obj) => obj?.ToString() ?? "***";

	protected override async Task OnInitializedAsync()
	{
		using var api = Endpoint("Properties/");
		var serialized = await api.GetStringAsync(Id.ToString());
		property = Newtonsoft.Json.JsonConvert.DeserializeObject<Property>(serialized);
		await base.OnInitializedAsync();
	}
}