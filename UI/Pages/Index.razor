@page "/"
@page "/{Purpose}"
@using Core.Models
@using System.Text.Json;
@using Newtonsoft.Json
@using System.Collections.Concurrent

@inherits ComponentAPI
@inject NavigationManager Navigator

<div class="row">
	<div class="col">
		<div class="input-group input-group" style="min-height:70px">
			<span class="input-group-text "><i class="oi oi-magnifying-glass"></i><small>Dublin City</small></span>
			<input type="text" class="form-control col-3" @bind="Purpose">
		</div>
	</div>
	<div class="col">
		<div class="input-group input-group" style="min-height:70px">
			<input type="text" class="form-control" placeholder="Price">
			<select type="text" class="form-control">
				<option>Any room</option>
				<option>Single</option>
				<option>Double room</option>
				<option>Twin</option>
				<option>Share</option>
			</select>
		</div>
	</div>
</div>
<br />
<div class="container">
	@if (true)
	{
		if (_properties is null) _properties = new List<Property> { new Property("", OfferPurpose.Rent, PropertyType.Flat, 0) };
		@foreach (var item in _properties)
		{
			<div role="button" @onclick="() => GoTo(item)" class="card mb-3" style="max-width: 740px;min-height:300px;min-width:480px">
				<div class="row g-0">
					<div class="col-md-8">
						<picture>
							@*<source srcset="/Photos" type="image/svg+xml+webp">*@
							@if (!item.Photos.Any())
							{
								<div class="d-flex justify-content-center text-center mt-5" style="min-height:300px;min-width:480px">
									<div class="spinner-border" role="status"></div>
								</div>
							}
							else
							{
								var photo = item.Photos.First();
								<img src="data:@(photo.Format);base64, @((string)photo)" class="img-fluid" style="min-height:300px;min-width:480px" alt="photo">
							}
						</picture>
					</div>
					<div class="col-md-4">
						<div class="card-body align-content-center">
							<h5 class="card-title fw-bold pt-5">€@item.Price per month</h5>
							<p class="card-text mb-1">@item.Address</p>
							<p class="card-text align-text-top"><small class="text-muted">@item.OfferPurpose - @item.Type </small></p>
						</div>
					</div>
				</div>
			</div>
			<br />
		}
	}
</div>

@code {

	[Parameter] public string Purpose { get; set; }

	List<Property> _properties;

	void GoTo(Property p) => Navigator.NavigateTo($"/details/{p.Id}", true);

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (_getPhotosTasks is null) return;
		foreach (var (key, task) in _getPhotosTasks)
		{
			var photos = JsonConvert.DeserializeObject<List<Photo>>(await task)!;

			var prop = _properties.Find(p => p.Id == key);
			photos.ForEach(prop.Add);
		}
	}

	Dictionary<long, Task<string>> _getPhotosTasks;

	protected override async Task OnInitializedAsync()
	{
		using var api = Endpoint("Properties");
		var strProps = await api.GetStringAsync("?from=0&quantity=20");
		_properties = JsonConvert.DeserializeObject<List<Property>>(strProps)!;

		StateHasChanged();

		_getPhotosTasks = _properties.ToDictionary(p => p.Id, async p =>
		{
			using var photosAPI = Endpoint("Photos");
			await Task.Delay(Random.Shared.Next(200, 500));
			p.PhotosChanged += (_, _) => InvokeAsync(StateHasChanged);
			return await photosAPI.GetStringAsync($"/property/{p.Id}", CancellationToken.None);
		});
		await base.OnInitializedAsync();
	}
}
